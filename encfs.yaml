---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: encfs
  name: encfs
  namespace: cc
spec:
  selector:
    matchLabels:
      app: encfs
  replicas: 1
  template:
    metadata:
      labels:
        app: encfs
        azure.workload.identity/use: "true"
      annotations:
        io.katacontainers.config.agent.policy: 
    spec:
      runtimeClassName: kata-cc-isolation
      serviceAccountName: encfs
      containers:
        - image: "ccacrsea.azurecr.io/encfs:main"
          imagePullPolicy: Always
          name: encfs
          command:
            - /encfs.sh
          env:
            - name: EncfsSideCarArgs
              value: ewogICAiYXp1cmVfZmlsZXN5c3RlbXMiOiBbCiAgICAgIHsKICAgICAgICAgIm1vdW50X3BvaW50IjogIi9tbnQvcmVtb3RlL3NoYXJlIiwKICAgICAgICAgImF6dXJlX3VybCI6ICJodHRwczovL2Njc2VhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9lbmNmcy9lbmNmc2thdGFjYy5pbWciLAogICAgICAgICAiYXp1cmVfdXJsX3ByaXZhdGUiOiB0cnVlLAogICAgICAgICAicmVhZF93cml0ZSI6IHRydWUsCiAgICAgICAgICJrZXkiOiB7CiAgICAgICAgICAgICJraWQiOiAiZW5jZnMiLAogICAgICAgICAgICAia3R5IjogIlJTQS1IU00iLAogICAgICAgICAgICAiYXV0aG9yaXR5IjogewogICAgICAgICAgICAgICAiZW5kcG9pbnQiOiAiY2NzZWEuc2FzaWEuYXR0ZXN0LmF6dXJlLm5ldCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImFrdiI6IHsKICAgICAgICAgICAgICAgImVuZHBvaW50IjogImNja3ZwLnZhdWx0LmF6dXJlLm5ldCIKICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAia2V5X2Rlcml2YXRpb24iOiB7CiAgICAgICAgICAgICJzYWx0IjogIjYwNDM4ZGVjMTkzZDE5MGEzOWVkOTMyYTQzNzg3NjQ0IiwKICAgICAgICAgICAgImxhYmVsIjogImVuY2ZzIgogICAgICAgICB9CiAgICAgIH0KICAgXQp9
            - name: UVM_SECURITY_CONTEXT_DIR
              value: /opt/confidential-containers/share/kata-containers
            - name: LogLevel
              value: trace
            - name: LogFile
              value: /var/log/encfs.log
          volumeMounts:
            - mountPath: /opt/confidential-containers/share/kata-containers/reference-info-base64
              name: endorsement-location
            - mountPath: /dev
              name: dev
            - mountPath: /mnt/remote
              name: remotemounts
              mountPropagation: Bidirectional
          securityContext:
            privileged: true
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - "-c"
                  - umount /mnt/remote/share
        - image: "alpine:3.18"
          imagePullPolicy: Always
          name: alpine
          command:
            - /bin/sh
            - "-c"
          args:
            - sleep infinity
          env:
            - name: UVM_SECURITY_CONTEXT_DIR
              value: /opt/confidential-containers/share/kata-containers
          volumeMounts:
            - mountPath: /opt/confidential-containers/share/kata-containers/reference-info-base64
              name: endorsement-location
            - mountPath: /mnt/remote
              name: remotemounts
              mountPropagation: HostToContainer
      terminationGracePeriodSeconds: 60
      imagePullSecrets:
        - name: ccacrsea
      volumes:
        - name: endorsement-location
          hostPath:
            path: /opt/confidential-containers/share/kata-containers/reference-info-base64
        - name: dev
          hostPath:
            path: /dev
        - name: remotemounts
          emptyDir: {}
